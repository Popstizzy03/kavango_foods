---
import "../styles/global.css";
import { Image } from 'astro:assets'
import sausage from '../assets/sausage-goodness.png'
import wrap from '../assets/tasty-wraps.png'
import samosa from '../assets/beef-samosas.png'
import combo from '../assets/combo-meals.png'
import { apiService } from '../services/api.ts';

const categoryImages = {
  'sausages': sausage,
  'wraps': wrap,
  'samosas': samosa,
  'combos': combo
};

// Try to fetch menu from API, fallback to static data
let menuItems = [];
try {
  menuItems = await apiService.getMenuItems();
} catch (error) {
  console.error('Failed to fetch menu items:', error);
  menuItems = [];
}

// Process categories from API data
const categories = [];
const categoryMap = {};

if (menuItems.length > 0) {
  menuItems.forEach(item => {
    const categoryName = item.category.name.toLowerCase();
    if (!categoryMap[categoryName]) {
      categoryMap[categoryName] = {
        id: categoryName,
        name: item.category.name,
        image: categoryImages[categoryName] || sausage,
        description: item.category.description || '',
        featured: true
      };
    }
  });
  categories.push(...Object.values(categoryMap));
}

// Fallback categories if API fails
if (categories.length === 0) {
  categories.push(
    {
      id: 'sausages',
      name: 'Sausage Goodness',
      image: sausage,
      description: 'Premium quality sausages grilled to perfection',
      featured: true
    },
    {
      id: 'wraps',
      name: 'Tasty Wraps',
      image: wrap,
      description: 'Flavorful fillings wrapped in soft tortillas',
      featured: true
    },
    {
      id: 'samosas',
      name: 'Beef Samosas',
      image: samosa,
      description: 'Crispy pastry filled with spiced beef',
      featured: true
    },
    {
      id: 'combos',
      name: 'Combo Meals',
      image: combo,
      description: 'Perfect combinations for any appetite',
      featured: true
    }
  );
}

// Get popular items from API or fallback
const popularItems = [];
if (menuItems.length > 0) {
  // Take first 4 items as popular for now
  popularItems.push(...menuItems.slice(0, 4).map(item => ({
    id: item.id,
    name: item.name,
    price: `K${item.price.toFixed(2)}`,
    image: categoryImages[item.category.name.toLowerCase()] || sausage,
    description: item.description || ''
  })));
} else {
  // Fallback popular items
  popularItems.push(
    {
      id: 'classic-beef',
      name: 'Classic Beef Sausage',
      price: 'K15.00',
      image: sausage,
      description: 'Premium beef sausage with our signature spice blend'
    },
    {
      id: 'new-flava',
      name: 'New Flava Wrap',
      price: 'K35.00',
      image: wrap,
      description: 'Our newest wrap with chicken, veggies and special sauce'
    },
    {
      id: 'beef-samosa',
      name: 'Beef Samosa (3 pcs)',
      price: 'K25.00',
      image: samosa,
      description: 'Crispy triangular pastry filled with spiced minced beef'
    },
    {
      id: '4d-savage',
      name: '4D Savage Combo',
      price: 'K120.00',
      image: combo,
      description: 'Includes 10 sausage rolls, 10 spring rolls, 10 beef samosas, and 10 shawarma halves'
    }
  );
}
---

<section id="menu" class="section bg-white">
  <div class="container mx-auto px-4">
    <div class="text-center mb-12">
      <h2 class="text-3xl md:text-4xl font-bold mb-4">Our Tasty <span class="text-primary">Menu</span></h2>
      <p class="text-text-light max-w-2xl mx-auto">Discover our wide range of delicious food options made from quality ingredients for your satisfaction.</p>
    </div>
    
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-16">
      {categories.map(category => (
        <div class="bg-white rounded-xl overflow-hidden shadow-md hover:shadow-lg transition-shadow duration-300">
          <div class="h-48 overflow-hidden">
            <Image 
              src={category.image} 
              alt={category.name}
              class="w-full h-full object-cover transform hover:scale-105 transition-transform duration-500"
            />
          </div>
          <div class="p-6">
            <h3 class="text-xl font-semibold mb-2">{category.name}</h3>
            <p class="text-text-light mb-4">{category.description}</p>
            <a href={`/menu#${category.id}`} class="inline-flex items-center text-primary font-medium">
              Explore
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-1" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M12.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd" />
              </svg>
            </a>
          </div>
        </div>
      ))}
    </div>
    
    <div class="mb-12">
      <div class="flex justify-between items-center mb-8">
        <h3 class="text-2xl font-bold">Popular Items</h3>
        <a href="/menu" class="text-primary font-medium inline-flex items-center">
          View All Menu
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-1" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M12.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd" />
          </svg>
        </a>
      </div>
      
      <div class="relative">
        <div class="carousel-container overflow-hidden">
          <div class="carousel-track flex transition-transform duration-300" id="popular-items-carousel">
            {popularItems.map(item => (
              <div class="carousel-item flex-shrink-0 w-full sm:w-1/2 lg:w-1/4 px-3">
                <div class="bg-white rounded-xl overflow-hidden border border-gray-100 hover:shadow-md transition-shadow duration-300">
                  <div class="h-40 overflow-hidden">
                    <Image 
                      src={item.image} 
                      alt={item.name}
                      class="w-full h-full object-cover"
                    />
                  </div>
                  <div class="p-4">
                    <div class="flex justify-between items-start mb-2">
                      <h4 class="font-semibold">{item.name}</h4>
                      <span class="text-primary font-bold">{item.price}</span>
                    </div>
                    <p class="text-text-light text-sm mb-4">{item.description}</p>
                    <button class="add-to-cart-btn w-full btn btn-primary py-2" data-id={item.id} data-name={item.name} data-price={item.price}>Add to Order</button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
        
        <div class="carousel-controls flex justify-center gap-4 mt-6">
          <button class="carousel-prev bg-white hover:bg-gray-50 border border-gray-200 rounded-full p-2 transition-colors" id="popular-prev">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
            </svg>
          </button>
          <button class="carousel-next bg-white hover:bg-gray-50 border border-gray-200 rounded-full p-2 transition-colors" id="popular-next">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
            </svg>
          </button>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  interface CartItem {
    id: string;
    name: string;
    price: string;
    quantity: number;
  }

  document.addEventListener('DOMContentLoaded', () => {
    const addToCartButtons = document.querySelectorAll('.add-to-cart-btn');
    
    addToCartButtons.forEach(button => {
      button.addEventListener('click', () => {
        const id = button.getAttribute('data-id');
        const name = button.getAttribute('data-name');
        const price = button.getAttribute('data-price');
        
        if (id && name && price) {
          addToCart(id, name, price);
          showToast(`${name} added to cart!`);
          document.dispatchEvent(new Event('cartUpdated'));
        }
      });
    });
    
    function addToCart(id: string, name: string, price: string): void {
      const cart: CartItem[] = JSON.parse(localStorage.getItem('cart') || '[]');
      const existingItem = cart.find((item: CartItem) => item.id === id);
      
      if (existingItem) {
        existingItem.quantity += 1;
      } else {
        cart.push({ id, name, price, quantity: 1 });
      }
      
      localStorage.setItem('cart', JSON.stringify(cart));
    }
    
    function showToast(message: string): void {
      // Create toast element if it doesn't exist
      let toast = document.getElementById('menu-toast');
      if (!toast) {
        toast = document.createElement('div');
        toast.id = 'menu-toast';
        toast.className = 'fixed bottom-4 right-4 px-4 py-3 rounded-lg shadow-lg z-50 bg-green-500 text-white hidden';
        document.body.appendChild(toast);
      }
      
      toast.textContent = message;
      toast.classList.remove('hidden');
      
      setTimeout(() => {
        toast.classList.add('hidden');
      }, 3000);
    }
    
    // Initialize popular items carousel
    function initPopularItemsCarousel(): void {
      const track = document.getElementById('popular-items-carousel');
      const prevBtn = document.getElementById('popular-prev');
      const nextBtn = document.getElementById('popular-next');
      
      if (!track || !prevBtn || !nextBtn) return;
      
      let currentIndex = 0;
      const items = track.querySelectorAll('.carousel-item');
      const totalItems = items.length;
      const itemsPerView = window.innerWidth >= 1024 ? 4 : window.innerWidth >= 640 ? 2 : 1;
      const maxIndex = Math.max(0, totalItems - itemsPerView);
      
      function updateCarousel() {
        const translateX = -(currentIndex * (100 / itemsPerView));
        track.style.transform = `translateX(${translateX}%)`;
      }
      
      prevBtn.addEventListener('click', () => {
        currentIndex = Math.max(0, currentIndex - 1);
        updateCarousel();
      });
      
      nextBtn.addEventListener('click', () => {
        currentIndex = Math.min(maxIndex, currentIndex + 1);
        updateCarousel();
      });
      
      // Handle window resize
      window.addEventListener('resize', () => {
        const newItemsPerView = window.innerWidth >= 1024 ? 4 : window.innerWidth >= 640 ? 2 : 1;
        const newMaxIndex = Math.max(0, totalItems - newItemsPerView);
        if (currentIndex > newMaxIndex) {
          currentIndex = newMaxIndex;
        }
        updateCarousel();
      });
    }
    
    initPopularItemsCarousel();
  });
</script>